# Sample configuration file for training a 3D U-Net on a task of predicting the nuclei in 3D stack from the lightsheet
# microscope. Training done with Binary Cross-Entropy.
# Training and validation data can be downloaded from: https://osf.io/thxzn/

# parameters that controls the task
# use a fixed random seed to guarantee that when you run the code twice you will get the same outcome
manual_seed: 0
# model configuration
model:
  # model class, e.g. UNet3D, ResidualUNet3D
  name: VNet3D

  # number of input channels to the model
  in_channels: 1
  # number of output channels
  out_channels: 1
  # apply element-wise nn.Sigmoid after the final 1x1 convolution, otherwise apply nn.Softmax
  # this is only relevant during inference, during training the network outputs logits and it is up to the loss function
  # to normalize with Sigmoid or Softmax
  final_sigmoid: true
  # if True applies the final normalization layer (sigmoid or softmax), otherwise the networks returns the output from the final convolution layer; use False for regression problems, e.g. de-noising
  is_segmentation: true

# loss function configuration
loss:
  # use BCE loss for training
  name: WeightedBCEWithLogitsLoss

# # optimizer configuration
# optimizer:
#   # initial learning rate
#   learning_rate: 0.0002
#   # weight decay
#   weight_decay: 0.00001

# optimizer configuration
optimizer:
  name: "SGD"
  # initial learning rate
  # learning_rate: 0.0002
  lr: 0.001
  # weight decay
  weight_decay: 0.0005
  # weight_decay: 0.005
  momentum: 0.99

# evaluation metric
eval_metric:
  # use dice coefficient
  name: DiceCoefficient

# # learning rate scheduler configuration
# lr_scheduler:
#   # reduce learning rate when evaluation metric plateaus
#   name: ReduceLROnPlateau
#   # use 'max' if eval_score_higher_is_better=True, 'min' otherwise
#   mode: max
#   # factor by which learning rate will be reduced
#   factor: 0.2
#   # number of *validation runs* with no improvement after which learning rate will be reduced
#   patience: 8

# learning rate scheduler configuration
lr_scheduler:
  # reduce learning rate when every certain updates
  name: StepLR
  # REDUCING LEARNING RATE IS NOT THE SOLUTION IN INCREMENTAL LEARNING
  step_size: 450000000
  # for debugging
  # step_size: 50
  # factor by which learning rate will be reduced
  gamma: 0.1

# trainer configuration
trainer:
  # how many iterations between validations
  validate_after_iters: 3000000
  # how many iterations between testing
  test_after_iters: 50
  # test_after_iters: 1
  # how many iterations between tensorboard logging
  log_after_iters: 50
  # log_after_iters: 1
  # only validate first several batches
  max_validate_iters: null
  # model with higher eval score is considered better
  eval_score_higher_is_better: True

# predictor configuration
predictor:
  # standard in memory predictor
  name: 'StandardPredictor'

# data loaders configuration
loaders:
  # class of the nrrd dataset, currently StandardHippoDataset and LazyHippoDataset are supported.
  # When using LazyHippoDataset make sure to set `num_workers = 1`, due to a bug in nrrd which corrupts the data
  # when reading from multiple threads.
  dataset: StandardHippoDataset
  # batch dimension; if number of GPUs is N > 1, then a batch_size of N * batch_size will automatically be taken for DataParallel
  batch_size: 1
  # how many subprocesses to use for data loading
  num_workers: 8

  # configuration of the train loader
  train:
    # SliceBuilder configuration, i.e. how to iterate over the input volume patch-by-patch
    slice_builder:
      name: SliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      # patch_shape: [64, 64, 64]

      # cropped
      patch_shape: [30, 55, 55]
      # patch_shape: [28, 54, 54]
      # train stride between patches
      stride_shape: [4, 4, 4]
      # minimum volume of the labels in the patch
      threshold: 0.05
      # probability of accepting patches which do not fulfil the threshold criterion
      slack_acceptance: 0.0
      # if at least threshold_count pixels present at the patch, then involve the patch in training!
      threshold_count: 1
      max_sample_size: null
      # max_sample_size: 1
      mcmc_chain_length: 0
      mcmc_sample_size: 0

    transformer:
      raw:
        # subtract mean and divide by std dev
        - name: Standardize
        # # randomly flips the volume in one of the axis
        - name: RandomFlip
        # # randomly rotates the volume with 90 deg across a randomly chosen plane
        # - name: RandomRotate90
        - name: RandomRotate
          # rotates by choosing random angle from [-30, 30] deg
          angle_spectrum: 22.5
          mode: reflect
        # - name: ElasticDeformation
        #   spline_order: 3
        - name: ToTensor
          expand_dims: true
      label:
        - name: RandomFlip
        - name: RandomRotate
          angle_spectrum: 22.5
          mode: reflect
        - name: ToTensor
          expand_dims: true
